openapi: 3.0.1
info:
  title: Leilao SLE
  description: API usando Micronaut
  version: "1.0"
paths:
  /auction/all:
    get:
      tags:
      - Auctions
      operationId: auction
      responses:
        "200":
          description: auction 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuctionDTO'
  /auction/allAuctions:
    get:
      tags:
      - Auctions
      operationId: listAuctions
      responses:
        "200":
          description: listAuctions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuctionDTO'
  /auction/bids/available-bids:
    get:
      tags:
      - Bids
      operationId: allBinds
      responses:
        "200":
          description: allBinds 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bid'
  /auction/bids/delete/{id}:
    delete:
      tags:
      - Bids
      operationId: deleteBid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bid_id:
                  type: integer
                  format: int64
        required: true
      responses:
        "200":
          description: deleteBid 200 response
          content:
            application/json:
              schema:
                type: object
  /auction/bids/find-bid/{id}:
    get:
      tags:
      - Bids
      operationId: findBidById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: findBidById 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bid'
  /auction/bids/register-bid:
    post:
      tags:
      - Bids
      operationId: createBid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bid'
        required: true
      responses:
        "200":
          description: createBid 200 response
          content:
            application/json:
              schema:
                type: object
  /auction/bids/update-bid/{id}:
    put:
      tags:
      - Bids
      operationId: updateBidById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bid'
        required: true
      responses:
        "200":
          description: updateBidById 200 response
          content:
            application/json:
              schema:
                type: object
  /auction/create:
    post:
      tags:
      - Auctions
      operationId: createAuction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auction'
        required: true
      responses:
        "200":
          description: createAuction 200 response
          content:
            application/json:
              schema:
                type: object
  /auction/export-data/{id}:
    get:
      tags:
      - Auctions
      operationId: auction_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: auction_1 200 response
          content:
            application/json:
              schema:
                type: object
  /auction/find-by-category:
    get:
      tags:
      - Auctions
      operationId: getAuction
      parameters:
      - name: category
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getAuction 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auction'
  /auction/{auction_id}:
    put:
      tags:
      - Auctions
      operationId: updateAuction
      parameters:
      - name: auction_id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auction'
        required: true
      responses:
        "200":
          description: updateAuction 200 response
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - Auctions
      operationId: deleteAuction
      parameters:
      - name: auction_id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: deleteAuction 200 response
          content:
            application/json:
              schema:
                type: object
  /client/delete/{id}:
    delete:
      tags:
      - Client
      operationId: deleteClient
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: deleteClient 200 response
          content:
            application/json:
              schema:
                type: object
  /client/find-client/{id}:
    get:
      tags:
      - Client
      operationId: findClientById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: findClientById 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
  /client/find-clients:
    get:
      tags:
      - Client
      operationId: allClients
      responses:
        "200":
          description: allClients 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
  /client/register:
    post:
      tags:
      - Client
      operationId: registerClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
        required: true
      responses:
        "200":
          description: registerClient 200 response
          content:
            application/json:
              schema:
                type: object
  /client/update-client/{id}:
    put:
      tags:
      - Client
      operationId: updateClient
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
        required: true
      responses:
        "200":
          description: updateClient 200 response
          content:
            application/json:
              schema:
                type: object
  /devices/available-devices:
    get:
      tags:
      - Devices
      operationId: findAllDevices
      responses:
        "200":
          description: findAllDevices 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComputingDeviceDTO'
  /devices/delete-device/{id}:
    delete:
      tags:
      - Devices
      operationId: deleteDeviceById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: deleteDeviceById 200 response
          content:
            application/json:
              schema:
                type: object
  /devices/find-by-category/{category}:
    get:
      tags:
      - Devices
      operationId: findByCategory
      parameters:
      - name: category
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: findByCategory 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComputingDeviceDTO'
  /devices/register-device:
    post:
      tags:
      - Devices
      operationId: registerDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComputingDevice'
        required: true
      responses:
        "200":
          description: registerDevice 200 response
          content:
            application/json:
              schema:
                type: object
  /devices/update-device/{id}:
    put:
      tags:
      - Devices
      operationId: updateDevice
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                device:
                  $ref: '#/components/schemas/ComputingDevice'
        required: true
      responses:
        "200":
          description: updateDevice 200 response
          content:
            application/json:
              schema:
                type: object
  /financialInstitution/available:
    get:
      tags:
      - Financial Institutions
      operationId: findFinancialInstitution
      responses:
        "200":
          description: findFinancialInstitution 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FinancialInstitution'
  /financialInstitution/delete/{id}:
    delete:
      tags:
      - Financial Institutions
      operationId: deleteFI
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: deleteFI 200 response
          content:
            application/json:
              schema:
                type: object
  /financialInstitution/register:
    post:
      tags:
      - Financial Institutions
      operationId: createFI
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinancialInstitution'
        required: true
      responses:
        "200":
          description: createFI 200 response
          content:
            application/json:
              schema:
                type: object
  /financialInstitution/update/{id}:
    put:
      tags:
      - Financial Institutions
      operationId: updateFI
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinancialInstitution'
        required: true
      responses:
        "200":
          description: updateFI 200 response
          content:
            application/json:
              schema:
                type: object
  /financialInstitution/{id}:
    get:
      tags:
      - Financial Institutions
      operationId: getFinancialInstitution
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getFinancialInstitution 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialInstitution'
  /vehicles/available-vehicle:
    get:
      tags:
      - Vehicles
      operationId: findAllVehicle
      responses:
        "200":
          description: findAllVehicle 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VehicleDTO'
  /vehicles/delete-vehicle/{id}:
    delete:
      tags:
      - Vehicles
      operationId: deleteVehicle
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: deleteVehicle 200 response
          content:
            application/json:
              schema:
                type: object
  /vehicles/find-vehicle-category/{category}:
    get:
      tags:
      - Vehicles
      operationId: getVehicleByCategory
      parameters:
      - name: category
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getVehicleByCategory 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VehicleDTO'
  /vehicles/find-vehicle/{id}:
    get:
      tags:
      - Vehicles
      operationId: getVehicle
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getVehicle 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleDTO'
  /vehicles/register-vehicle:
    post:
      tags:
      - Vehicles
      operationId: createVehicle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
        required: true
      responses:
        "200":
          description: createVehicle 200 response
          content:
            application/json:
              schema:
                type: object
  /vehicles/update-vehicle/{id}:
    put:
      tags:
      - Vehicles
      operationId: updateVehicle
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                vehicle:
                  $ref: '#/components/schemas/Vehicle'
        required: true
      responses:
        "200":
          description: updateVehicle 200 response
          content:
            application/json:
              schema:
                type: object
components:
  schemas:
    Auction:
      type: object
      properties:
        auctionId:
          type: integer
          format: int64
          nullable: true
        numAuction:
          type: integer
          format: int32
        status:
          type: string
        occurrenceDate:
          type: string
          format: date
        occurrenceHour:
          type: string
          format: partial-time
        finishDate:
          type: string
          format: date
        finishHour:
          type: string
          format: partial-time
        visitDate:
          type: string
          format: date
        visitHour:
          type: string
          format: partial-time
        address:
          type: string
        category:
          type: string
        fInstitutions:
          type: array
          items:
            $ref: '#/components/schemas/FinancialInstitution'
        product:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Product'
    AuctionDTO:
      type: object
      properties:
        numAuction:
          type: integer
          format: int32
        status:
          type: string
        occurrenceDate:
          type: string
          format: date
        occurrenceHour:
          type: string
          format: partial-time
        visitDate:
          type: string
          format: date
        visitHour:
          type: string
          format: partial-time
        address:
          type: string
        category:
          type: string
        fInstitutions:
          type: array
          items:
            $ref: '#/components/schemas/FinancialInstitutionDTO'
        product:
          $ref: '#/components/schemas/ProductDTO'
    Bid:
      type: object
      properties:
        bidId:
          type: integer
          format: int64
          nullable: true
        bidValue:
          type: number
          format: double
        date:
          type: string
          format: date-time
        bidCategory:
          type: string
        device:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ComputingDevice'
        vehicle:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Vehicle'
        client:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Client'
    BidDTO:
      type: object
      properties:
        bidValue:
          type: number
          format: double
        date:
          type: string
          format: date-time
        bidCategory:
          type: string
        client:
          $ref: '#/components/schemas/ClientDTO'
    Client:
      type: object
      properties:
        clientId:
          type: integer
          format: int64
          nullable: true
        name:
          type: string
        email:
          type: string
        cpf:
          type: string
        digitalCertificate:
          type: string
    ClientDTO:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        cpf:
          type: string
        digitalCertificate:
          type: string
    ComputingDevice:
      required:
      - antenna
      - bids
      - brand
      - category
      - description
      - id
      - initialValue
      - name
      - ports
      - product
      - productSpecification
      - quantity
      - screenSize
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        name:
          type: string
        quantity:
          type: integer
          format: int32
        category:
          type: string
        description:
          type: string
        brand:
          type: string
        initialValue:
          type: number
          format: double
        ports:
          type: string
        productSpecification:
          type: string
        screenSize:
          type: string
        antenna:
          type: boolean
        product:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Product'
        bids:
          type: array
          items:
            $ref: '#/components/schemas/Bid'
    ComputingDeviceDTO:
      type: object
      properties:
        name:
          type: string
        quantity:
          type: integer
          format: int32
        category:
          type: string
        description:
          type: string
        brand:
          type: string
        initialValue:
          type: number
          format: double
        ports:
          type: string
        productSpecification:
          type: string
        screenSize:
          type: string
        antenna:
          type: boolean
        bids:
          type: array
          items:
            $ref: '#/components/schemas/BidDTO'
    FinancialInstitution:
      type: object
      properties:
        fiid:
          type: integer
          format: int64
          nullable: true
        cnpj:
          type: string
        name:
          type: string
        address:
          type: string
    FinancialInstitutionDTO:
      type: object
      properties:
        fiid:
          type: integer
          format: int64
        cnpj:
          type: string
        name:
          type: string
        address:
          type: string
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        devices:
          type: array
          items:
            $ref: '#/components/schemas/ComputingDevice'
        vehicles:
          type: array
          items:
            $ref: '#/components/schemas/Vehicle'
    ProductDTO:
      type: object
      properties:
        devices:
          type: array
          items:
            $ref: '#/components/schemas/ComputingDeviceDTO'
        vehicles:
          type: array
          items:
            $ref: '#/components/schemas/VehicleDTO'
    Vehicle:
      required:
      - bid
      - brand
      - category
      - color
      - description
      - id
      - initialValue
      - manufactureYear
      - model
      - product
      - resultPrecautionaryExpertise
      - sunroof
      - tractionType
      - yearLicensing
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        brand:
          type: string
        manufactureYear:
          type: string
        model:
          type: string
        description:
          type: string
        color:
          type: string
        initialValue:
          type: number
          format: double
        category:
          type: string
        yearLicensing:
          type: integer
          format: int32
        resultPrecautionaryExpertise:
          type: string
        tractionType:
          type: string
        sunroof:
          type: boolean
        product:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Product'
        bid:
          type: array
          items:
            $ref: '#/components/schemas/Bid'
    VehicleDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        brand:
          type: string
        manufactureYear:
          type: string
        model:
          type: string
        description:
          type: string
        color:
          type: string
        initialValue:
          type: number
          format: double
        category:
          type: string
        yearLicensing:
          type: integer
          format: int32
        resultPrecautionaryExpertise:
          type: string
        tractionType:
          type: string
        sunroof:
          type: boolean
        bids:
          type: array
          items:
            $ref: '#/components/schemas/BidDTO'
